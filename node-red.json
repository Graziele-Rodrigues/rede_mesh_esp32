[
    {
        "id": "tab1",
        "type": "tab",
        "label": "Painel Mesh",
        "disabled": false,
        "info": ""
    },
    {
        "id": "mqtt_rssi",
        "type": "mqtt in",
        "z": "tab1",
        "name": "RSSI MQTT",
        "topic": "/topic/mesh/rssi",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6ec4dcef.913b24",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 390,
        "y": 560,
        "wires": [
            [
                "cd2ca644d1528406"
            ]
        ]
    },
    {
        "id": "table_rssi",
        "type": "ui_table",
        "z": "tab1",
        "group": "grupo_rssi",
        "name": "Tabela RSSI",
        "order": 1,
        "width": 15,
        "height": 4,
        "columns": [
            {
                "field": "mac",
                "title": "MAC",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "rssi",
                "title": "RSSI",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 850,
        "y": 560,
        "wires": []
    },
    {
        "id": "mqtt_metrics",
        "type": "mqtt in",
        "z": "tab1",
        "name": "Métricas MQTT",
        "topic": "/topic/mesh/metricas",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6ec4dcef.913b24",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 420,
        "y": 680,
        "wires": [
            [
                "96866108bbb66ddd"
            ]
        ]
    },
    {
        "id": "table_metrics",
        "type": "ui_table",
        "z": "tab1",
        "group": "grupo_metrics",
        "name": "Tabela Métricas",
        "order": 1,
        "width": 0,
        "height": 0,
        "columns": [
            {
                "field": "Sucesso",
                "title": "Sucesso",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Perda",
                "title": "Perda",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "RTT",
                "title": "RTT",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Camadas",
                "title": "Camadas",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Nós na Rede",
                "title": "Nós na Rede",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Trocas Pai",
                "title": "Trocas Pai",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Ult. Troca",
                "title": "Ult. Troca",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Retransmissões",
                "title": "Retransmissões",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 880,
        "y": 680,
        "wires": []
    },
    {
        "id": "cd2ca644d1528406",
        "type": "function",
        "z": "tab1",
        "name": "rssi",
        "func": "// Recupera a tabela atual da memória do fluxo\nlet tabela = flow.get(\"rssi_table\") || [];\n\nlet novo = {\n    mac: msg.payload.mac,\n    rssi: msg.payload.rssi\n};\n\nlet index = tabela.findIndex(item => item.mac === novo.mac);\n\nif (index !== -1) {\n    // Atualiza se já existe\n    tabela[index].rssi = novo.rssi;\n} else {\n    // Adiciona se for novo MAC\n    tabela.push(novo);\n}\n\n// Salva de volta na memória\nflow.set(\"rssi_table\", tabela);\n\n// Envia a tabela completa para o ui_table\nmsg.payload = tabela;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 560,
        "wires": [
            [
                "table_rssi"
            ]
        ]
    },
    {
        "id": "cd8425e2db43371a",
        "type": "mqtt in",
        "z": "tab1",
        "name": "Sensor MQTT",
        "topic": "/topic/mesh/sensor",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6ec4dcef.913b24",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 390,
        "y": 440,
        "wires": [
            [
                "9bd16a5d882acace"
            ]
        ]
    },
    {
        "id": "9bd16a5d882acace",
        "type": "function",
        "z": "tab1",
        "name": "sensores",
        "func": "// Recupera a tabela atual da memória do fluxo\nlet sensorTable = flow.get(\"sensor_table\") || [];\n\n// Obtém o timestamp enviado pelo sensor (em ms)\nconst latency = parseInt(msg.payload.latency_ms, 10);\n\n// Cria o objeto com dados atualizados\nlet novo = {\n  mac: msg.payload.mac,\n  temperatura: parseFloat(msg.payload.temp).toFixed(2),\n  umidade: parseFloat(msg.payload.hum).toFixed(2),\n  latencia: latency\n};\n\n// Verifica se o MAC já existe na tabela\nlet index = sensorTable.findIndex(item => item.mac === novo.mac);\n\nif (index !== -1) {\n  // Atualiza os valores existentes\n  sensorTable[index] = { ...sensorTable[index], ...novo };\n} else {\n  // Adiciona nova entrada\n  sensorTable.push(novo);\n}\n\n// Armazena a tabela atualizada no flow\nflow.set(\"sensor_table\", sensorTable);\n\n// Envia a tabela para o próximo nó (ex: ui_table)\nmsg.payload = sensorTable;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 440,
        "wires": [
            [
                "56789c177d54f1b7"
            ]
        ]
    },
    {
        "id": "56789c177d54f1b7",
        "type": "ui_table",
        "z": "tab1",
        "group": "grupo_sensores",
        "name": "Tabela sensores",
        "order": 4,
        "width": 15,
        "height": 3,
        "columns": [
            {
                "field": "mac",
                "title": "MAC",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "temperatura",
                "title": "Temperatura",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "umidade",
                "title": "Umidade",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "latencia",
                "title": "Latência (ms)",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 860,
        "y": 440,
        "wires": []
    },
    {
        "id": "96866108bbb66ddd",
        "type": "function",
        "z": "tab1",
        "name": "metricas",
        "func": "msg.payload = [{\n  \"Camadas\": msg.payload.layer,\n  \"Sucesso\": msg.payload.success_rate,\n  \"Perda\": msg.payload.packet_loss_rate,\n  \"RTT\": msg.payload.rtt_ms,\n  \"Nós na Rede\": msg.payload.children_count,\n  \"Trocas Pai\": msg.payload.parent_changes,\n  \"Ult. Troca\": msg.payload.last_parent_change_ms,\n  \"Retransmissões\": msg.payload.retransmission_count\n}];\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 680,
        "wires": [
            [
                "table_metrics"
            ]
        ]
    },
    {
        "id": "b135aaf411c107cd",
        "type": "mqtt in",
        "z": "tab1",
        "name": "Sensor MQTT",
        "topic": "/topic/mesh/sensor",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6ec4dcef.913b24",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 390,
        "y": 60,
        "wires": [
            [
                "21f94b3f363a211c"
            ]
        ]
    },
    {
        "id": "21f94b3f363a211c",
        "type": "function",
        "z": "tab1",
        "name": "temperatura",
        "func": "// Obtém o histórico salvo no fluxo ou inicia como array vazio\nlet historico = flow.get(\"grafico_temp\") || [];\n\n// Verifica se msg.payload.temp é válido\nif (msg.payload && typeof msg.payload.temp === \"number\") {\n    let dado = {\n        t: new Date().toLocaleTimeString(), // ou usar Date.now() se quiser timestamp\n        y: msg.payload.temp\n    };\n\n    historico.push(dado);\n\n    // Limita a 50 pontos\n    if (historico.length > 50) {\n        historico.shift();\n    }\n\n    // Salva novamente no fluxo\n    flow.set(\"grafico_temp\", historico);\n\n    // Envia o histórico completo para o template\n    msg.payload = historico;\n} else {\n    // Se o dado estiver incorreto, envia um aviso no debug\n    node.warn(\"Dado inválido em msg.payload.temp\");\n    msg.payload = [];  // Pode evitar erro no template\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 60,
        "wires": [
            [
                "d25e1efb88d1af19",
                "e01a64aa0f85aea9"
            ]
        ]
    },
    {
        "id": "d25e1efb88d1af19",
        "type": "ui_template",
        "z": "tab1",
        "group": "grupo_sensores",
        "name": "",
        "order": 1,
        "width": 5,
        "height": 6,
        "format": "<canvas id=\"graficoTemp\" width=\"400\" height=\"200\"></canvas>\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n<script>\n(function(scope) {\n    let chart;\n\n    function criarGrafico(data) {\n        const ctx = document.getElementById(\"graficoTemp\").getContext(\"2d\");\n        const chartData = data.map(d => ({ x: d.t, y: d.y }));\n\n        chart = new Chart(ctx, {\n            type: 'line',\n            data: {\n                labels: data.map(d => d.t),\n                datasets: [{\n                    label: 'Temperatura (°C)',\n                    data: chartData,\n                    fill: false,\n                    borderColor: 'red',\n                    tension: 0.1\n                }]\n            },\n            options: {\n                responsive: true,\n                scales: {\n                    x: {\n                        title: { display: true, text: 'Hora' },\n                        type: 'category'\n                    },\n                    y: {\n                        beginAtZero: false,\n                        title: { display: true, text: 'Temperatura (°C)' }\n                    }\n                }\n            }\n        });\n    }\n\n    scope.$watch('msg.payload', function(data) {\n        if (!Array.isArray(data)) return;\n\n        if (!chart) {\n            criarGrafico(data);\n        } else {\n            const chartData = data.map(d => ({ x: d.t, y: d.y }));\n            chart.data.labels = data.map(d => d.t);\n            chart.data.datasets[0].data = chartData;\n            chart.update();\n        }\n    });\n})(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 820,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "97d50156fbfb4bd6",
        "type": "mqtt in",
        "z": "tab1",
        "name": "Sensor MQTT",
        "topic": "/topic/mesh/sensor",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6ec4dcef.913b24",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 390,
        "y": 200,
        "wires": [
            [
                "d80ac32dba14a510"
            ]
        ]
    },
    {
        "id": "d80ac32dba14a510",
        "type": "function",
        "z": "tab1",
        "name": "umidade",
        "func": "// Obtém o histórico salvo no fluxo ou inicia como array vazio\nlet historico = flow.get(\"grafico_hum\") || [];\n\n// Verifica se msg.payload.temp é válido\nif (msg.payload && typeof msg.payload.hum === \"number\") {\n    let dado = {\n        t: new Date().toLocaleTimeString(), // ou usar Date.now() se quiser timestamp\n        y: msg.payload.hum\n    };\n\n    historico.push(dado);\n\n    // Limita a 50 pontos\n    if (historico.length > 50) {\n        historico.shift();\n    }\n\n    // Salva novamente no fluxo\n    flow.set(\"grafico_hum\", historico);\n\n    // Envia o histórico completo para o template\n    msg.payload = historico;\n} else {\n    // Se o dado estiver incorreto, envia um aviso no debug\n    node.warn(\"Dado inválido em msg.payload.hum\");\n    msg.payload = [];  // Pode evitar erro no template\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 200,
        "wires": [
            [
                "c7a4a52ffb62729d",
                "e649f11928249c65"
            ]
        ]
    },
    {
        "id": "c7a4a52ffb62729d",
        "type": "ui_template",
        "z": "tab1",
        "group": "grupo_sensores",
        "name": "",
        "order": 2,
        "width": 5,
        "height": 6,
        "format": "<canvas id=\"graficoHum\" width=\"400\" height=\"200\"></canvas>\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n<script>\n    (function(scope) {\n    let chart;\n\n    function criarGrafico(data) {\n        const ctx = document.getElementById(\"graficoHum\").getContext(\"2d\");\n        const chartData = data.map(d => ({ x: d.t, y: d.y }));\n\n        chart = new Chart(ctx, {\n            type: 'line',\n            data: {\n                labels: data.map(d => d.t),\n                datasets: [{\n                    label: 'Umidade (%)',\n                    data: chartData,\n                    fill: false,\n                    borderColor: 'blue',\n                    tension: 0.1\n                }]\n            },\n            options: {\n                responsive: true,\n                scales: {\n                    x: {\n                        title: { display: true, text: 'Hora' },\n                        type: 'category'\n                    },\n                    y: {\n                        beginAtZero: false,\n                        title: { display: true, text: 'Umidade (%)' }\n                    }\n                }\n            }\n        });\n    }\n\n    scope.$watch('msg.payload', function(data) {\n        if (!Array.isArray(data)) return;\n\n        if (!chart) {\n            criarGrafico(data);\n        } else {\n            const chartData = data.map(d => ({ x: d.t, y: d.y }));\n            chart.data.labels = data.map(d => d.t);\n            chart.data.datasets[0].data = chartData;\n            chart.update();\n        }\n    });\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 820,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "ca0161732f7ac35d",
        "type": "mqtt in",
        "z": "tab1",
        "name": "Sensor MQTT",
        "topic": "/topic/mesh/sensor",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6ec4dcef.913b24",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 390,
        "y": 320,
        "wires": [
            [
                "73273bc023f09679"
            ]
        ]
    },
    {
        "id": "73273bc023f09679",
        "type": "function",
        "z": "tab1",
        "name": "latencia",
        "func": "let historico = flow.get(\"grafico_lat\") || [];\n\nif (msg.payload && typeof msg.payload.latency_ms === \"number\") {\n\n    // Cria dado para gráfico\n    let dado = {\n        t: new Date().toLocaleTimeString(),\n        y: msg.payload.latency_ms\n    };\n\n    historico.push(dado);\n\n    if (historico.length > 50) {\n        historico.shift();\n    }\n\n    flow.set(\"grafico_lat\", historico);\n    msg.payload = historico;\n} else {\n    node.warn(\"timestamp_ms ausente ou inválido\");\n    msg.payload = [];\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 320,
        "wires": [
            [
                "ec02d25f5e1a6405",
                "b56bf3cffc643174"
            ]
        ]
    },
    {
        "id": "ec02d25f5e1a6405",
        "type": "ui_template",
        "z": "tab1",
        "group": "grupo_sensores",
        "name": "",
        "order": 3,
        "width": 5,
        "height": 6,
        "format": "<div>\n    <canvas id=\"grafico_lat\" width=\"400\" height=\"200\"></canvas>\n</div>\n\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n<script>\n    (function(scope) {\n    let chart;\n\n    function criarGrafico(data) {\n        const ctx = document.getElementById(\"grafico_lat\").getContext(\"2d\");\n\n        chart = new Chart(ctx, {\n            type: 'line',\n            data: {\n                labels: data.map(p => p.t),\n                datasets: [{\n                    label: 'Latência (ms)',\n                    data: data.map(p => ({ x: p.t, y: p.y })),\n                    fill: false,\n                    borderColor: 'green',\n                    tension: 0.1\n                }]\n            },\n            options: {\n                responsive: true,\n                scales: {\n                    x: {\n                        type: 'category',\n                        title: { display: true, text: 'Horário' }\n                    },\n                    y: {\n                        beginAtZero: true,\n                        title: { display: true, text: 'Latência (ms)' }\n                    }\n                }\n            }\n        });\n    }\n\n    scope.$watch('msg.payload', function(data) {\n        if (!Array.isArray(data)) return;\n\n        if (!chart) {\n            criarGrafico(data);\n        } else {\n            chart.data.labels = data.map(p => p.t);\n            chart.data.datasets[0].data = data.map(p => ({ x: p.t, y: p.y }));\n            chart.update();\n        }\n    });\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 820,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "e01a64aa0f85aea9",
        "type": "debug",
        "z": "tab1",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 100,
        "wires": []
    },
    {
        "id": "e649f11928249c65",
        "type": "debug",
        "z": "tab1",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 240,
        "wires": []
    },
    {
        "id": "b56bf3cffc643174",
        "type": "debug",
        "z": "tab1",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 360,
        "wires": []
    },
    {
        "id": "6d03d4cb9e361f86",
        "type": "mqtt out",
        "z": "tab1",
        "name": "",
        "topic": "/topic/mesh/restart",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "mqtt_broker",
        "x": 1390,
        "y": 100,
        "wires": []
    },
    {
        "id": "858f35dda525e990",
        "type": "ui_button",
        "z": "tab1",
        "name": "",
        "group": "c43853a14aa4af82",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Reinicia Rede Mesh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "restart_mesh",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 1120,
        "y": 100,
        "wires": [
            [
                "6d03d4cb9e361f86"
            ]
        ]
    },
    {
        "id": "5331b087743761df",
        "type": "mqtt in",
        "z": "tab1",
        "name": "",
        "topic": "/topic/mesh/rssi",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6ec4dcef.913b24",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1080,
        "y": 220,
        "wires": [
            [
                "cdba259c1214bcb5"
            ]
        ]
    },
    {
        "id": "cdba259c1214bcb5",
        "type": "function",
        "z": "tab1",
        "name": "signal",
        "func": "const payload = msg.payload;\n\n// Extrai e formata os valores\nconst macAddress = payload.mac || null;\nconst rssiRaw = parseInt(payload.rssi, 10);\nconst rssi = Number.isNaN(rssiRaw) ? null : rssiRaw;\n\n// Query SQL interpolada corretamente com crase\nmsg.topic = `INSERT INTO signal (mac, rssi) VALUES ('${macAddress}', ${rssi});`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 220,
        "wires": [
            [
                "bd855edacaabe2e9",
                "3aabf05b9eb9c9e8"
            ]
        ]
    },
    {
        "id": "a1d1e7cdcd59a6cd",
        "type": "sqlite",
        "z": "tab1",
        "mydb": "b931a41ca7c16188",
        "sqlquery": "msg.topic",
        "sql": "INSERT INTO signal(mac, rssi) VALUES (?, ?)\n",
        "name": "signal",
        "x": 1830,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "145efec868e512d1",
        "type": "mqtt in",
        "z": "tab1",
        "name": "",
        "topic": "/topic/mesh/metricas",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6ec4dcef.913b24",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1090,
        "y": 360,
        "wires": [
            [
                "71438fec4d2df473"
            ]
        ]
    },
    {
        "id": "71438fec4d2df473",
        "type": "function",
        "z": "tab1",
        "name": "metrics",
        "func": "const p = msg.payload;\n\nmsg.topic = `INSERT INTO metrics (\n    sucesso, perda, layer, nos, rtt, trocas_pai, ult_troca, retransmissoes\n) VALUES (\n    ${parseFloat(p.success_rate)},\n    ${parseFloat(p.packet_loss_rate)},\n    ${parseInt(p.layer, 10)},\n    ${parseInt(p.children_count, 10)},\n    ${parseInt(p.rtt_ms, 10)},\n    ${parseInt(p.parent_changes, 10)},\n    ${parseInt(p.last_parent_change_ms, 10)},\n    ${parseInt(p.retransmission_count, 10)}\n);`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 360,
        "wires": [
            [
                "d07c276b58e85c5e",
                "1b115ef813d73dc3"
            ]
        ]
    },
    {
        "id": "14dd0ea2434d40d1",
        "type": "sqlite",
        "z": "tab1",
        "mydb": "b931a41ca7c16188",
        "sqlquery": "msg.topic",
        "sql": "INSERT INTO metrics (\n    sucesso, perda, layer, nos, rtt, trocas_pai, ult_troca, retransmissoes\n) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
        "name": "metrics",
        "x": 1840,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "bd855edacaabe2e9",
        "type": "delay",
        "z": "tab1",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1570,
        "y": 220,
        "wires": [
            [
                "a1d1e7cdcd59a6cd"
            ]
        ]
    },
    {
        "id": "d07c276b58e85c5e",
        "type": "delay",
        "z": "tab1",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1610,
        "y": 360,
        "wires": [
            [
                "14dd0ea2434d40d1"
            ]
        ]
    },
    {
        "id": "d640521fc806dcb9",
        "type": "mqtt in",
        "z": "tab1",
        "name": "",
        "topic": "/topic/mesh/sensor",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6ec4dcef.913b24",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1090,
        "y": 500,
        "wires": [
            [
                "4cb3038b43f8a4af"
            ]
        ]
    },
    {
        "id": "4cb3038b43f8a4af",
        "type": "function",
        "z": "tab1",
        "name": "data_sensor",
        "func": "const payload = msg.payload;\n\n// Extrai e formata os valores\nconst macAddress = payload.mac;\nconst temperature = parseFloat(payload.temp).toFixed(2);\nconst humidity = parseFloat(payload.hum).toFixed(2);\nconst timestamp_ms = (parseInt(payload.latency_ms, 10));  // timestamp enviado pelo nó sensor (campo que você deve incluir)\n\nmsg.topic = `INSERT INTO mesh_sensor_data (mac, temperatura, umidade, latencia) VALUES ('${macAddress}', ${temperature}, ${humidity}, ${timestamp_ms});`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 520,
        "wires": [
            [
                "f08e9e5c2738be54",
                "f03ee1aae834aab3"
            ]
        ]
    },
    {
        "id": "f08e9e5c2738be54",
        "type": "delay",
        "z": "tab1",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1610,
        "y": 520,
        "wires": [
            [
                "9131ed3b3b91ebdb"
            ]
        ]
    },
    {
        "id": "9131ed3b3b91ebdb",
        "type": "sqlite",
        "z": "tab1",
        "mydb": "b931a41ca7c16188",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "mesh_sensor_data",
        "x": 1810,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "3aabf05b9eb9c9e8",
        "type": "debug",
        "z": "tab1",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1420,
        "y": 280,
        "wires": []
    },
    {
        "id": "1b115ef813d73dc3",
        "type": "debug",
        "z": "tab1",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 440,
        "wires": []
    },
    {
        "id": "f03ee1aae834aab3",
        "type": "debug",
        "z": "tab1",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1540,
        "y": 600,
        "wires": []
    },
    {
        "id": "6ec4dcef.913b24",
        "type": "mqtt-broker",
        "name": "mosquitto publico",
        "broker": "mqtt://test.mosquitto.org",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "15",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "grupo_rssi",
        "type": "ui_group",
        "name": "RSSI",
        "tab": "aba_mesh",
        "order": 2,
        "disp": true,
        "width": 15,
        "collapse": false
    },
    {
        "id": "grupo_metrics",
        "type": "ui_group",
        "name": "Métricas",
        "tab": "aba_mesh",
        "order": 3,
        "disp": true,
        "width": 15,
        "collapse": false
    },
    {
        "id": "grupo_sensores",
        "type": "ui_group",
        "name": "Dados Sensores",
        "tab": "aba_mesh",
        "order": 1,
        "disp": true,
        "width": 15,
        "collapse": false
    },
    {
        "id": "mqtt_broker",
        "type": "mqtt-broker",
        "name": "Broker MQTT",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": 4,
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "c43853a14aa4af82",
        "type": "ui_group",
        "name": "Ações na Rede",
        "tab": "aba_mesh",
        "order": 4,
        "disp": true,
        "width": 15,
        "collapse": false,
        "className": ""
    },
    {
        "id": "b931a41ca7c16188",
        "type": "sqlitedb",
        "db": "C:/Users/grazi/TCC/rede_mesh.db",
        "mode": "RWC"
    },
    {
        "id": "aba_mesh",
        "type": "ui_tab",
        "name": "Painel Mesh",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]